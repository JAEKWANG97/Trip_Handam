plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.ssafy.handam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'log4j', module: 'log4j'
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.spring.io/milestone' }
}

dependencies {
    // Spring Boot Starter Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-web'           // 웹 애플리케이션
    implementation 'org.springframework.boot:spring-boot-starter-validation'    // 검증 기능
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'      // JPA (Hibernate)

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    // Database Drivers
    runtimeOnly 'com.h2database:h2'                                              // H2 Database (개발/테스트 용)
    runtimeOnly 'com.mysql:mysql-connector-j'                                    // MySQL Driver

    // QueryDSL for Dynamic Query
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'                     // QueryDSL JPA with Jakarta EE
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    // QueryDSL Annotation Processor (Q 클래스 자동 생성)
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"              // Jakarta Annotations
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"            // Jakarta Persistence API (JPA)

    // Lombok for Code Generation
    compileOnly 'org.projectlombok:lombok'                                       // Lombok (코드 단순화)
    annotationProcessor 'org.projectlombok:lombok'                               // Lombok Annotation Processor

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'       // Spring Boot 테스트 기능
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'                 // JUnit 테스트 실행기

    // Spring REST Docs for Documentation
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'    // Spring REST Docs with Asciidoctor
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'    // REST Docs 테스트
    testImplementation 'org.springframework.restdocs:spring-restdocs-core'       // REST Docs Core
    // Elasticsearch for Search Engine
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch' // Elasticsearch 연동

    // Apache Kafka for Messaging
    implementation 'org.springframework.kafka:spring-kafka'                     // Kafka 연동
    testImplementation 'org.springframework.kafka:spring-kafka-test'            // Kafka 테스트 도구
    implementation 'org.apache.kafka:kafka-clients:3.4.0'                       // Kafka 클라이언트 라이브러리

    // Hadoop Dependencies
    implementation 'org.apache.hadoop:hadoop-common:3.3.6'              // Hadoop Core
    implementation 'org.apache.hadoop:hadoop-hdfs:3.3.6'                // Hadoop HDFS
    implementation 'org.apache.hadoop:hadoop-client:3.3.6'              // Hadoop Client

    // Spring Cloud Dependencies
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // math3
    implementation 'org.apache.commons:commons-math3:3.6.1'

}




ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2023.0.3")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources {
        include("**/*.adoc") // `index.adoc` 경로 수정
    }

    baseDirFollowsSourceFile()
    dependsOn test

    // 출력 디렉토리를 설정합니다.
    outputDir = file("build/docs/asciidoc")
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn tasks.named('test')
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn asciidoctor
    from("build/docs/asciidoc") {
        into "static/docs"
    }
}